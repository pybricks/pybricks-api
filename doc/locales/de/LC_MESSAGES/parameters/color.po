# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-26 20:11+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../main/parameters/color.rst:4 2b3e093b9ed24e399542088cdd03dfc5
msgid "Color"
msgstr ""

#: 81a30dcd327e48569f549ae8539885ba of pybricks.parameters.Color:1
msgid "Light or surface color."
msgstr ""

#: ../../main/parameters/color.rst fac0813e62854f859cadebcf73380ff0
msgid "Parameters"
msgstr ""

#: 1050305007b2416ab2ff6818071bb70c of pybricks.parameters.Color:3
msgid "Hue."
msgstr ""

#: 0640a855e6b34ddc9735af4490ec44f6 of pybricks.parameters.Color:5
msgid "Saturation."
msgstr ""

#: c8e00f606aaf451699d0838c97675916 of pybricks.parameters.Color:7
msgid "Brightness value."
msgstr ""

#: ../../main/parameters/color.rst:9 04615747c9294bcd9f2cea6a5160362c
msgid "Saturated colors"
msgstr ""

#: ../../main/parameters/color.rst:10 aaf65185faff456a99eb886128976600
msgid ""
"These colors have maximum saturation and brightness value. They differ "
"only in hue."
msgstr ""

#: ../../main/parameters/color.rst:46 c0c0cdf6b98541f18361a37aca9d9eae
msgid "Unsaturated colors"
msgstr ""

#: ../../main/parameters/color.rst:47 e9fd189fa9d542f4ad1710b911677d65
msgid ""
"These colors have zero hue and saturation. They differ only in brightness"
" value."
msgstr ""

#: ../../main/parameters/color.rst:50 16ae89e65f374c0e852af41d55a68902
msgid ""
"When detecting these colors using sensors, their values depend a lot on "
"the distance to the object. If the distance between the sensor and the "
"object is not constant in your robot, it is better to use only one of "
"these colors in your programs."
msgstr ""

#: ../../main/parameters/color.rst:65 e7db49253b0e4df5b13da733da65742e
msgid ""
"This represents dark objects that still reflect a very small amount of "
"light."
msgstr ""

#: ../../main/parameters/color.rst:72 1888d5d356214eacbb2f95bf7a128ffa
msgid "This is total darkness, with no reflection or light at all."
msgstr ""

#: ../../main/parameters/color.rst:77 c6df6be5de7540bf85e32bac6cfac845
msgid "Making your own colors"
msgstr ""

#: ../../main/parameters/color.rst:78 eac7b503d3c94a138fcbffaeefca4203
msgid ""
"This example shows the basics of color properties, and how to define new "
"colors."
msgstr ""

#: ../../main/parameters/color.rst:80 d66f1dd374f14a6bb2a351991cfad05d
msgid ""
"from pybricks.parameters import Color\n"
"\n"
"# You can print colors. Colors may be obtained from the Color class, or\n"
"# from sensors that return color measurements.\n"
"print(Color.RED)\n"
"\n"
"# You can read hue, saturation, and value properties.\n"
"print(Color.RED.h, Color.RED.s, Color.RED.v)\n"
"\n"
"# You can make your own colors. Saturation and value are 100 by default.\n"
"my_green = Color(h=125)\n"
"my_dark_green = Color(h=125, s=80, v=30)\n"
"\n"
"# When you print custom colors, you see exactly how they were defined.\n"
"print(my_dark_green)\n"
"\n"
"# You can also add colors to the builtin colors.\n"
"Color.MY_DARK_BLUE = Color(h=235, s=80, v=30)\n"
"\n"
"# When you add them like this, printing them only shows its name. But you"
" can\n"
"# still read h, s, v by reading its attributes.\n"
"print(Color.MY_DARK_BLUE)\n"
"print(Color.MY_DARK_BLUE.h, Color.MY_DARK_BLUE.s, Color.MY_DARK_BLUE.v)\n"
msgstr ""

#: ../../main/parameters/color.rst:83 109c91a0c8774428976dacc7a677468b
msgid "This example shows more advanced use cases of the ``Color`` class."
msgstr ""

#: ../../main/parameters/color.rst:85 00399918f0b44ebf89e01321a877b77a
msgid ""
"from pybricks.parameters import Color\n"
"\n"
"# Two colors are equal if their h, s, and v attributes are equal.\n"
"if Color.BLUE == Color(240, 100, 100):\n"
"    print(\"Yes, these colors are the same.\")\n"
"\n"
"# You can scale colors to change their brightness value.\n"
"red_dark = Color.RED * 0.5\n"
"\n"
"# You can shift colors to change their hue.\n"
"red_shifted = Color.RED >> 30\n"
"\n"
"# Colors are immutable, so you can't change h, s, or v of an existing "
"object.\n"
"try:\n"
"    Color.GREEN.h = 125\n"
"except AttributeError:\n"
"    print(\"Sorry, can't change the hue of an existing color object!\")\n"
"\n"
"# But you can override builtin colors by defining a whole new color.\n"
"Color.GREEN = Color(h=125)\n"
"\n"
"# You can access and store colors as class attributes, or as a "
"dictionary.\n"
"print(Color.BLUE)\n"
"print(Color[\"BLUE\"])\n"
"print(Color[\"BLUE\"] is Color.BLUE)\n"
"print(Color)\n"
"print([c for c in Color])\n"
"\n"
"# This allows you to update existing colors in a loop.\n"
"for name in (\"BLUE\", \"RED\", \"GREEN\"):\n"
"    Color[name] = Color(1, 2, 3)\n"
msgstr ""

