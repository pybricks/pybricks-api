# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-26 20:11+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../main/hubs/cityhub.rst:4 faf12c5d72654a509218c2511870f982
msgid "City Hub"
msgstr ""

#: ../../main/hubs/cityhub.rst:5 1c9a41f2591140d0862ba00fb24d1d20
msgid ".. image:: ../../main/cad/output/hub-city.png"
msgstr ""

#: ../../main/hubs/cityhub.rst:8 d95eb1bf435d4fa998893d69b7ace8ad
msgid ".. image:: /blockimg/pybricks_variables_set_city_hub_option0.svg"
msgstr ""

#: ../../main/hubs/cityhub.rst:10 a5f5811bf49f4ba5adb602b3d723735f
msgid ".. image:: /blockimg/pybricks_variables_set_city_hub_option3.svg"
msgstr ""

#: b96588ecd5d2431b8d45065237e3bfec of pybricks.hubs.CityHub:1
msgid "LEGOÂ® City Hub."
msgstr ""

#: ../../main/hubs/cityhub.rst 03fbcad1f9a841ef879ec1c15a5b3e3d
#: 1b0358c241104fffa0d2b5d1baab3245 27badc64a2f941aeba7a76764e65da49
#: 64497fc002ab447ba4dd029bb9957c95 84287270ecf04a91896a0c1347a7863b
#: 860934d9b1454044a0ab91edac18b5e5 ad7e0d4560494893ba3a2cc51fffb3cc
#: c61b88a861d445afb42bc39a6a634a02 e08a29d5f18540b0958226d56bdf88b6
msgid "Parameters"
msgstr ""

#: 15ad9c0b75634f5d946f60eda53457c9 of pybricks.hubs.CityHub:3
msgid ""
"A value from 0 to 255 indicating which channel ``hub.ble.broadcast()`` "
"will use. Default is channel 0."
msgstr ""

#: 33f657aeeacd49859ac840b63a2ac072 of pybricks.hubs.CityHub:5
msgid ""
"A list of channels to listen to when ``hub.ble.observe()`` is called. "
"Listening to more channels requires more memory. Default is an empty list"
" (no channels)."
msgstr ""

#: d175e96a086043e9acd6443c85c6fa87 of pybricks.hubs.CityHub:9
msgid "Added *broadcast_channel* and *observe_channels* arguments."
msgstr ""

#: ../../main/hubs/cityhub.rst:17 a4f1537ce31d459da612450006b22d5f
msgid "Using the hub status light"
msgstr ""

#: ../../main/hubs/cityhub.rst:18 4d964d10df8d4798a94c1792aff56e8e
msgid ".. image:: /blockimg/pybricks_blockLightOnColor_cityhub_on.svg"
msgstr ""

#: 088015529dee4b21889f9faa369bf364 of pybricks._common.ColorLight.on:1
msgid "Turns on the light at the specified color."
msgstr ""

#: 16fc4d38ce1f4b5e94c5e817690e6e6c fce6d6fe4666407083a70e8a07125ff1 of
#: pybricks._common.ColorLight.blink:11 pybricks._common.ColorLight.on:3
msgid "Color of the light."
msgstr ""

#: ../../main/hubs/cityhub.rst:22 2e4f6d1722704c248011bf1df7cab27a
msgid ".. image:: /blockimg/pybricks_blockLightOnColor_cityhub_off.svg"
msgstr ""

#: 0894188fa7cb4b6eb040446a02953109 of pybricks._common.ColorLight.off:1
msgid "Turns off the light."
msgstr ""

#: ace2f8db08ff423c87bed4bea64e06bd of pybricks._common.ColorLight.blink:1
msgid ""
"Blinks the light at a given color by turning it on and off for given "
"durations."
msgstr ""

#: a263b7ed4717405a8f956e8d65ca82e7 of pybricks._common.ColorLight.blink:4
msgid ""
"The light keeps blinking indefinitely while the rest of your program "
"keeps running."
msgstr ""

#: 95d275a84d524c26995fc28b5eb6fa55 of pybricks._common.ColorLight.blink:7
msgid ""
"This method provides a simple way to make basic but useful patterns. For "
"more generic and multi-color patterns, use ``animate()`` instead."
msgstr ""

#: b2cb572bea614068b39e9bfa97028cf7 of pybricks._common.ColorLight.blink:13
msgid "Sequence of time values of the form ``[on_1, off_1, on_2, off_2, ...]``."
msgstr ""

#: f533aa0b16fe4c938a9fde6a32605525 of pybricks._common.ColorLight.animate:1
msgid ""
"Animates the light with a sequence of colors, shown one by one for the "
"given interval."
msgstr ""

#: 7ebe8735de3147ccbd4a6cd2656e62ef of pybricks._common.ColorLight.animate:4
msgid ""
"The animation runs in the background while the rest of your program keeps"
" running. When the animation completes, it repeats."
msgstr ""

#: 694dc2455a704be28aa6b52f06446057 of pybricks._common.ColorLight.animate:7
msgid "Sequence of :class:`Color <.parameters.Color>` values."
msgstr ""

#: 0ef99f7f21ef4608a4be6e22344315a8 of pybricks._common.ColorLight.animate:10
msgid "Time between color updates."
msgstr ""

#: ../../main/hubs/cityhub.rst:31 1c33b768312a41fab39ea71620c6d92a
msgid "Using connectionless Bluetooth messaging"
msgstr ""

#: ../../main/hubs/cityhub.rst:32 3ca9e34bfebf46cba5d904f2390e2d81
msgid ".. image:: /blockimg/pybricks_blockBleBroadcast_CityHub.svg"
msgstr ""

#: 60835a3856bb4882a04f9f56f3fbc640 of pybricks._common.BLE.broadcast:1
msgid ""
"Starts broadcasting the given data on the ``broadcast_channel`` you "
"selected when initializing the hub."
msgstr ""

#: 5d747120e7434d75b40166ceb2d6ba11 of pybricks._common.BLE.broadcast:4
msgid ""
"Data may be of type ``int``, ``float``, ``str``, ``bytes``, ``True``, or "
"``False``, or a list thereof."
msgstr ""

#: 496cfdfda52046ef84e9e8323a2c9a49 of pybricks._common.BLE.broadcast:7
msgid ""
"Choose ``None`` to stop broadcasting. This helps improve performance when"
" you don't need the broadcast feature, especially when observing at the "
"same time."
msgstr ""

#: 3379248231db4fc2bd777d8d3145f1db of pybricks._common.BLE.broadcast:11
msgid ""
"The total data size is quite limited (26 bytes). ``True`` and ``False`` "
"take 1 byte each. ``float`` takes 5 bytes. ``int`` takes 2 to 5 bytes "
"depending on how big the number is. ``str`` and ``bytes`` take the number"
" of bytes in the object plus one extra byte."
msgstr ""

#: 21d69eb948d54bcf8da38430fbcadc94 of pybricks._common.BLE.broadcast:16
msgid ""
"When multitasking, only one task can broadcast at a time. To broadcast "
"information from multiple tasks (or block stacks), you could use a "
"dedicated separate task that broadcast new values when one or more "
"variables change."
msgstr ""

#: cd32e0957fa24900a9eb1f8c5cc9fc28 of pybricks._common.BLE.broadcast:21
msgid "The value or values to be broadcast."
msgstr ""

#: ../../main/hubs/cityhub.rst:36 f38c7eaeb75e428782f93280ad353d92
msgid ".. image:: /blockimg/pybricks_blockBleObserve_CityHub.svg"
msgstr ""

#: c086388e64f449d682a3dc92be8290c0 of pybricks._common.BLE.observe:1
msgid "Retrieves the last observed data for a given channel."
msgstr ""

#: 5acb7814c6ad45388203b3112e96b7a4 of pybricks._common.BLE.observe:3
msgid ""
"Receiving data is more reliable when the hub is not connected to a "
"computer or other devices at the same time."
msgstr ""

#: de574f034cfe45f1b075a8db35821490 of pybricks._common.BLE.observe:6
msgid "The channel to observe (0 to 255)."
msgstr ""

#: ../../main/hubs/cityhub.rst 06e875bf0dc445de9c876ab5f27e516c
#: 0ef1e7ea8b634d8b91c62ee9ba0f6e5e 1c9ac26ce3724d578b9c8bbb07607a8e
#: 5564523205fe47f6b616fee42b71daf9 9a3f2b04a3a149e79db32f2b537d296d
#: a174898c10b145c7be6aef98820c814f b5140f30fc174df4950d3257d98f5404
#: f054703ab8cd4b1aa37c0883acd3867e
msgid "Returns"
msgstr ""

#: bab4ed6e99434492865ae80bb9ae382e of pybricks._common.BLE.observe:9
msgid ""
"The received data in the same format as it was sent, or ``None`` if no "
"recent data is available."
msgstr ""

#: 96454d99d2564685a24cf8a72e9729a8 of pybricks._common.BLE.signal_strength:1
msgid "Gets the average signal strength in dBm for the given channel."
msgstr ""

#: 8fa08919108b46e9aaafa3273f82ebd3 of pybricks._common.BLE.signal_strength:3
msgid ""
"This indicates how near the broadcasting device is. Nearby devices may "
"have a signal strength around -40 dBm, while far away devices might have "
"a signal strength around -70 dBm."
msgstr ""

#: cc2786baa8fc425e8e0f212c6f4931df of pybricks._common.BLE.signal_strength:7
msgid "The channel number (0 to 255)."
msgstr ""

#: 93f7b05c5750481c97e319a00603b58b of pybricks._common.BLE.signal_strength:10
msgid "The signal strength or ``-128`` if there is no recent observed data."
msgstr ""

#: 3327e4455f0d4b06ae522df1358653e4 of pybricks._common.BLE.version:1
msgid "Gets the firmware version from the Bluetooth chip."
msgstr ""

#: ../../main/hubs/cityhub.rst:45 974ea9a290b94d15b4f28209fc64ea72
msgid "Using the battery"
msgstr ""

#: ../../main/hubs/cityhub.rst:46 68f916e7efaf4510bd7583c1de54d28f
msgid ""
".. image:: "
"/blockimg/pybricks_blockBatteryMeasure_CityHub_battery.voltage.svg"
msgstr ""

#: a7becd6b2c314c19bb90243c423bb544 of pybricks._common.Battery.voltage:1
msgid "Gets the voltage of the battery."
msgstr ""

#: 8b6d07c2dfca4ba79004721f49281499 of pybricks._common.Battery.voltage:3
msgid "Battery voltage."
msgstr ""

#: ../../main/hubs/cityhub.rst:50 db35275eedb04b6aa7ff8515d2cf2c2a
msgid ""
".. image:: "
"/blockimg/pybricks_blockBatteryMeasure_CityHub_battery.current.svg"
msgstr ""

#: 0011f50bef3843a98f958f5c71771c9b of pybricks._common.Battery.current:1
msgid "Gets the current supplied by the battery."
msgstr ""

#: 0f1b7ab11466474aaa14468e888412f5 of pybricks._common.Battery.current:3
msgid "Battery current."
msgstr ""

#: ../../main/hubs/cityhub.rst:55 811bca6917f648368ea9310b64fb60e9
msgid "Button and system control"
msgstr ""

#: ../../main/hubs/cityhub.rst:56 279efbda76ac4eb0809dc20347f2dfa7
msgid ".. image:: /blockimg/pybricks_blockButtonIsPressed_CityHub.svg"
msgstr ""

#: d4881e9ca1a2446eb5890f8cbe336026 of pybricks._common.Keypad.pressed:1
msgid "Checks which buttons are currently pressed."
msgstr ""

#: 3737edb9317a4aa6a2a043a7bd93ee49 of pybricks._common.Keypad.pressed:3
msgid "Set of pressed buttons."
msgstr ""

#: ../../main/hubs/cityhub.rst:60 ffa99c025539438fb304ac5b5770bd34
msgid ".. image:: /blockimg/pybricks_blockHubStopButton_CityHub.svg"
msgstr ""

#: ../../main/hubs/cityhub.rst:62 a4491cefad0f4abfa2441d5a7221e686
msgid ".. image:: /blockimg/pybricks_blockHubStopButton_CityHub_none.svg"
msgstr ""

#: 1515325f47f04583a2cb4f3e4bc60bbe of
#: pybricks._common.System.set_stop_button:1
msgid "Sets the button or button combination that stops a running script."
msgstr ""

#: 0d83afd48a3d4861a8cefcef8d9f30c3 of
#: pybricks._common.System.set_stop_button:3
msgid ""
"Normally, the center button is used to stop a running script. You can "
"change or disable this behavior in order to use the button for other "
"purposes."
msgstr ""

#: 2f753e54ecd845e68eee311e6b45939a of
#: pybricks._common.System.set_stop_button:7
msgid ""
"A button such as :attr:`Button.CENTER "
"<pybricks.parameters.Button.CENTER>`, or a tuple of multiple buttons. "
"Choose ``None`` to disable the stop button altogether. If you do, you can"
" still turn the hub off by holding the center button for three seconds."
msgstr ""

#: 8d9b56f2d2aa4680aa268be0f541f7ad of pybricks._common.System.name:1
msgid "Gets the hub name. This is the name you see when connecting via Bluetooth."
msgstr ""

#: 6710ddf9b53445329ed9bdfa0cbe067d of pybricks._common.System.name:4
msgid "The hub name."
msgstr ""

#: d423d5e600a64b46ae834702ab9673cf of pybricks._common.System.storage:1
msgid "Reads or writes binary data to persistent storage."
msgstr ""

#: 898106a98e9743129079dac224d15c83 of pybricks._common.System.storage:3
msgid ""
"This lets you store data that can be used the next time you run the "
"program."
msgstr ""

#: d4b6799f0e5f4a0a963c6bff01456b29 of pybricks._common.System.storage:6
msgid ""
"The data will be saved to flash memory when you turn the hub off "
"normally. It will not be saved if the batteries are removed *while* the "
"hub is still running."
msgstr ""

#: 89719829651c4b66b9228cdfe2997f9c of pybricks._common.System.storage:10
msgid ""
"Once saved, the data will remain available even after you remove the "
"batteries."
msgstr ""

#: b489bcff9ee44d2587223336316f6641 of pybricks._common.System.storage:13
msgid "The offset from the start of the user storage memory, in bytes."
msgstr ""

#: 2ebabce1296a4b08bce76b55f1d894fe of pybricks._common.System.storage:15
msgid "The number of bytes to read. Omit this argument when writing."
msgstr ""

#: d45d9eaf7bbb4948b802a55c198adaff of pybricks._common.System.storage:17
msgid "The bytes to write. Omit this argument when reading."
msgstr ""

#: e45474dfe8d24405a22d4b5b8a4b7d5d of pybricks._common.System.storage:20
msgid "The bytes read if reading, otherwise ``None``."
msgstr ""

#: ../../main/hubs/cityhub.rst d93adf60e8414c5b8609c93c9e86c220
msgid "Raises"
msgstr ""

#: f4f262121cf84f6d80a00a691898f91d of pybricks._common.System.storage:22
msgid "If you try to read or write data outside of the allowed range."
msgstr ""

#: ../../main/hubs/cityhub.rst:71 7006359686cb481e99c50702cced0710
msgid ""
"You can store up to 128 bytes of data on this hub. The data is cleared "
"when you update the Pybricks firmware or if you restore the original "
"firmware."
msgstr ""

#: ../../main/hubs/cityhub.rst:75 b3b11bc87926424ba6cdd0050fe506cf
msgid ".. image:: /blockimg/pybricks_blockHubShutdown_CityHub.svg"
msgstr ""

#: d65e42d9a33b4aa79d549b0f74c5376b of pybricks._common.System.shutdown:1
msgid "Stops your program and shuts the hub down."
msgstr ""

#: 9a75cf96c8c74de5ba60e53c05423dc2 of pybricks._common.System.reset_reason:1
msgid ""
"Finds out how and why the hub (re)booted. This can be useful to diagnose "
"some problems."
msgstr ""

#: 91e5d7ead57742719652a52bf851952b of pybricks._common.System.reset_reason:4
msgid ""
"* ``0`` if the hub was previously powered off   normally. * ``1`` if the "
"hub rebooted automatically, like   after a firmware update. * ``2`` if "
"the hub previously   crashed due to a watchdog timeout, which indicates a"
" firmware   issue."
msgstr ""

#: fef78910ae364af083b27baa83218ed8 of pybricks._common.System.reset_reason:6
msgid "``0`` if the hub was previously powered off normally."
msgstr ""

#: c019c4b55bb84ec4827fa676a53dcb7f of pybricks._common.System.reset_reason:8
msgid "``1`` if the hub rebooted automatically, like after a firmware update."
msgstr ""

#: 5c6c443f34504577aaaada33cbd37cf0 of pybricks._common.System.reset_reason:10
msgid ""
"``2`` if the hub previously crashed due to a watchdog timeout, which "
"indicates a firmware issue."
msgstr ""

#: ../../main/hubs/cityhub.rst:82 06077bf518034f569a119c7d137f1012
msgid "Status light examples"
msgstr ""

#: ../../main/hubs/cityhub.rst:85 f1f4124e9b424b19af2e6ee99e2230fd
msgid "Turning the light on and off"
msgstr ""

#: ../../main/hubs/cityhub.rst:87 dda9946c91724fd5b0de299299aabcb7
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:91 deb6e9e3dc774d0295cdbc745d2f5067
msgid "Changing brightness and using custom colors"
msgstr ""

#: ../../main/hubs/cityhub.rst:93 4d52884fb8c4407ea918d21a2343e915
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Show the color at 30% brightness.\n"
"hub.light.on(Color.RED * 0.3)\n"
"\n"
"wait(2000)\n"
"\n"
"# Use your own custom color.\n"
"hub.light.on(Color(h=30, s=100, v=50))\n"
"\n"
"wait(2000)\n"
"\n"
"# Go through all the colors.\n"
"for hue in range(360):\n"
"    hub.light.on(Color(hue))\n"
"    wait(10)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:97 e2256ca40ee04429972f53d570536198
msgid "Making the light blink"
msgstr ""

#: ../../main/hubs/cityhub.rst:99 bcb94cec0be940009d2aa03bc8e85cda
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = CityHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:103 c4a159a2f27d430c89499e43fb85cb21
msgid "Creating light animations"
msgstr ""

#: ../../main/hubs/cityhub.rst:105 48bc5a686aca451e8e5a567f612f4218
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"from umath import sin, pi\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Make an animation with multiple colors.\n"
"hub.light.animate([Color.RED, Color.GREEN, Color.NONE], interval=500)\n"
"\n"
"wait(10000)\n"
"\n"
"# Make the color RED grow faint and bright using a sine pattern.\n"
"hub.light.animate([Color.RED * (0.5 * sin(i / 15 * pi) + 0.5) for i in "
"range(30)], 40)\n"
"\n"
"wait(10000)\n"
"\n"
"# Cycle through a rainbow of colors.\n"
"hub.light.animate([Color(h=i * 8) for i in range(45)], interval=40)\n"
"\n"
"wait(10000)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:110 2b2add31d7ea431cbdaf61572bf645d6
msgid "Bluetooth examples"
msgstr ""

#: ../../main/hubs/cityhub.rst:113 8e05c1c6a87e4857a94ba53b3f15752c
msgid "Broadcasting data to other hubs"
msgstr ""

#: ../../main/hubs/cityhub.rst:115 b19eeb9ddd2141cdae34a53fcb273100
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:119 4756ce9e77194f999381fc78d3706e11
msgid "Observing data from other hubs"
msgstr ""

#: ../../main/hubs/cityhub.rst:121 54495978c3bc4333a8dc51a406ce38cf
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:126 4f4e4a7303fe4ebab3193bba879e9985
msgid "Button and system examples"
msgstr ""

#: ../../main/hubs/cityhub.rst:129 9598d557692d4869962dbb28ea43f45f
msgid "Using the stop button during your program"
msgstr ""

#: ../../main/hubs/cityhub.rst:131 ba4677813ce94aa798f7aa6a69783aab
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""

#: ../../main/hubs/cityhub.rst:135 567424b4e6964b8e8903c35da51c4967
msgid "Turning the hub off"
msgstr ""

#: ../../main/hubs/cityhub.rst:137 45ed5edb9dca4ee3bbf63bda1f6c43ef
msgid ""
"from pybricks.hubs import CityHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = CityHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""

