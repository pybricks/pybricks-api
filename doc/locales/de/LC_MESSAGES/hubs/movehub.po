# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2023 The Pybricks Authors
# This file is distributed under the same license as the pybricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pybricks v3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-26 20:11+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../main/hubs/movehub.rst:4 9c7d44da467a4d39914ff489bdd4198c
msgid "Move Hub"
msgstr ""

#: ../../main/hubs/movehub.rst:8 00bbf6271cb54051ae79b73f7f1f2662
msgid ".. image:: ../../main/diagrams/movehub.png"
msgstr ""

#: ../../main/hubs/movehub.rst:11 cf03ad45a9374996b263fc1893dd4820
msgid ".. image:: /blockimg/pybricks_variables_set_move_hub_option0.svg"
msgstr ""

#: ../../main/hubs/movehub.rst:13 8e8b2ba0573d4da8aa31d0fa7014dbd7
msgid ".. image:: /blockimg/pybricks_variables_set_move_hub_option4.svg"
msgstr ""

#: 04e0acacb0f44e2ba9481b727df6a076 of pybricks.hubs.MoveHub:1
msgid "LEGO® BOOST Move Hub."
msgstr ""

#: ../../main/hubs/movehub.rst 29e02797f85c4eff9ce511f090db7020
#: 45a72f651b6f46c895a131343f2a4775 8f43b6d7c35a4ad699a9574779cdfe64
#: 904f348c27e44a0bbc974cf983cffd40 9157c9ff8c5f48e28b4eae895185fde5
#: 9a4b191aea9940a89840b8aa13bb6f41 a8348a4207f5408d9a65da0df6ebe48d
#: ae2e1b761c5d4c0cbf1e25bd80ef02b7 f938df10e322433ba5139afd3543fa02
msgid "Parameters"
msgstr ""

#: 790304ec80944c589e54db4f80dfd35e of pybricks.hubs.MoveHub:3
msgid "The axis that passes through the *top side* of the hub."
msgstr ""

#: 31198960bdf9465d9228512ec0d36390 of pybricks.hubs.MoveHub:6
msgid "The axis that passes through the *front side* of the hub."
msgstr ""

#: 3b08085af1684bd8aa4972f9b007ca3f of pybricks.hubs.MoveHub:9
msgid ""
"A value from 0 to 255 indicating which channel ``hub.ble.broadcast()`` "
"will use. Default is channel 0."
msgstr ""

#: f89cd05c8b684b879b795f06fcad9974 of pybricks.hubs.MoveHub:11
msgid ""
"A list of channels to listen to when ``hub.ble.observe()`` is called. "
"Listening to more channels requires more memory. Default is an empty list"
" (no channels)."
msgstr ""

#: f9c84c2dbdcf4bb6b1851f95e4e911ac of pybricks.hubs.MoveHub:15
msgid "Added *broadcast_channel* and *observe_channels* arguments."
msgstr ""

#: ../../main/hubs/movehub.rst:20 964e6bef509b47f4b740df300efc17b7
msgid "Using the hub status light"
msgstr ""

#: ../../main/hubs/movehub.rst:21 a3e8032effe647d1b37247fc68824a20
msgid ".. image:: /blockimg/pybricks_blockLightOnColor_movehub_on.svg"
msgstr ""

#: 6513dd2de9914829ac2fd1076283fd70 of pybricks._common.ColorLight.on:1
msgid "Turns on the light at the specified color."
msgstr ""

#: 0e5221deebd34ba5883c551e659a5513 d5896b2c465a439384c6d6d51fab4c12 of
#: pybricks._common.ColorLight.blink:11 pybricks._common.ColorLight.on:3
msgid "Color of the light."
msgstr ""

#: ../../main/hubs/movehub.rst:25 847cd5a89270486d960cd266c314c50e
msgid ".. image:: /blockimg/pybricks_blockLightOnColor_movehub_off.svg"
msgstr ""

#: 14ab25ba2b9c42ef8baa0cee0860cdd2 of pybricks._common.ColorLight.off:1
msgid "Turns off the light."
msgstr ""

#: 627e64ea99884ccfb918df21d0b75d0c of pybricks._common.ColorLight.blink:1
msgid ""
"Blinks the light at a given color by turning it on and off for given "
"durations."
msgstr ""

#: 4cadb5d7ee4d4c26afe11f460aa7ae20 of pybricks._common.ColorLight.blink:4
msgid ""
"The light keeps blinking indefinitely while the rest of your program "
"keeps running."
msgstr ""

#: 0bfb170b70c043ff93d4ea39d7f55f3f of pybricks._common.ColorLight.blink:7
msgid ""
"This method provides a simple way to make basic but useful patterns. For "
"more generic and multi-color patterns, use ``animate()`` instead."
msgstr ""

#: 8416857d6c1942f1b65ce535e3e1bcd6 of pybricks._common.ColorLight.blink:13
msgid "Sequence of time values of the form ``[on_1, off_1, on_2, off_2, ...]``."
msgstr ""

#: 994d23e577b34e74b5ea3850a5d0e984 of pybricks._common.ColorLight.animate:1
msgid ""
"Animates the light with a sequence of colors, shown one by one for the "
"given interval."
msgstr ""

#: ad129f2c53c7402fbd6182086fddcaca of pybricks._common.ColorLight.animate:4
msgid ""
"The animation runs in the background while the rest of your program keeps"
" running. When the animation completes, it repeats."
msgstr ""

#: 6510085da3f643fea2bd474b7c328737 of pybricks._common.ColorLight.animate:7
msgid "Sequence of :class:`Color <.parameters.Color>` values."
msgstr ""

#: 0a77ca8d878b4df8a976fed5d8620939 of pybricks._common.ColorLight.animate:10
msgid "Time between color updates."
msgstr ""

#: ../../main/hubs/movehub.rst:34 10195217b3eb4e18a27ca111ab720323
msgid "Using the IMU"
msgstr ""

#: ../../main/hubs/movehub.rst:35 45f2c333cdf741498f37ba33ecf76196
msgid ".. image:: /blockimg/pybricks_blockImuUp_MoveHub.svg"
msgstr ""

#: 8107cc94918f4c7e90ab404798e899a1 of
#: pybricks._common.SimpleAccelerometer.up:1
msgid "Checks which side of the hub currently faces upward."
msgstr ""

#: ../../main/hubs/movehub.rst 026a5fcabc734e11b1ba4996541f0067
#: 0797a6f3b61c412db339def42948e44f 12da0e0d4c0748dca321de4c461d7ff1
#: 52e8861d10a441f688577840e7028bb5 60905b100b264c56ab10c945c774088d
#: 68b90255fa7b443dae9e5fa73be5665d aba9a8bd7ef341babd0480e5cfa481ef
#: d2639b03a43c48958a775e090822e820 d3b3cb205aac44439602013804eaf07e
#: d7e93ab4d3354d0d99658f34c93fad2b f2970aa1f8224c3d9e7891d8b89c5e4d
msgid "Returns"
msgstr ""

#: a427b664bcd24140b21f40479b5edf3c of
#: pybricks._common.SimpleAccelerometer.up:3
msgid ""
"``Side.TOP``, ``Side.BOTTOM``, ``Side.LEFT``, ``Side.RIGHT``, "
"``Side.FRONT`` or ``Side.BACK``."
msgstr ""

#: ../../main/hubs/movehub.rst:39 ccedb27a8c2d44ed82d80fc60a6e22da
msgid ".. image:: /blockimg/pybricks_blockTilt_MoveHub_imu.tilt.pitch.svg"
msgstr ""

#: ../../main/hubs/movehub.rst:41 ddd4389ad86b4f10b76081bd390d2eaa
msgid ".. image:: /blockimg/pybricks_blockTilt_MoveHub_imu.tilt.roll.svg"
msgstr ""

#: e07120e34ed04c6bbe8a48c3d9edbfea of
#: pybricks._common.SimpleAccelerometer.tilt:1
msgid ""
"Gets the pitch and roll angles. This is relative to the :ref:`user-"
"specified neutral orientation <robotframe>`."
msgstr ""

#: db411922ef3846f9a6ae9aa3b16e11b4 of
#: pybricks._common.SimpleAccelerometer.tilt:4
msgid ""
"The order of rotation is pitch-then-roll. This is equivalent to a "
"positive rotation along the robot y-axis and then a positive rotation "
"along the x-axis."
msgstr ""

#: 9df26d213c8946948a30f4fc2a55dea7 of
#: pybricks._common.SimpleAccelerometer.tilt:8
msgid "Tuple of pitch and roll angles in degrees."
msgstr ""

#: ../../main/hubs/movehub.rst:46 c001175bf7694063a29d608934598173
msgid ".. image:: /blockimg/pybricks_blockImuAcceleration_MoveHub.svg"
msgstr ""

#: 7c97e4a80c714e2ea08aa8a728eef933 of
#: pybricks._common.SimpleAccelerometer.acceleration:1
msgid "Gets the acceleration of the device."
msgstr ""

#: d066d70391944ae8bf35c30bae0b1827 of
#: pybricks._common.SimpleAccelerometer.acceleration:3
msgid "Acceleration along all three axes."
msgstr ""

#: ../../main/hubs/movehub.rst:52 f67548bed6414c989ebf3c0f6c7bedc4
msgid "Changed acceleration units from m/s² to mm/s²."
msgstr ""

#: ../../main/hubs/movehub.rst:55 9699ae5079704e2492e640f06bc07ea9
msgid "Using connectionless Bluetooth messaging"
msgstr ""

#: ../../main/hubs/movehub.rst:56 fc14bcb149d549a3b9ffb8f7cb3172f9
msgid ".. image:: /blockimg/pybricks_blockBleBroadcast_PrimeHub.svg"
msgstr ""

#: 1bbd86cc1c71498f9d5308214ed9c594 of pybricks._common.BLE.broadcast:1
msgid ""
"Starts broadcasting the given data on the ``broadcast_channel`` you "
"selected when initializing the hub."
msgstr ""

#: e00e3f830e0d477e80df77e20a1e8797 of pybricks._common.BLE.broadcast:4
msgid ""
"Data may be of type ``int``, ``float``, ``str``, ``bytes``, ``True``, or "
"``False``, or a list thereof."
msgstr ""

#: 19daf26f0a9a42eb84e13a355f436ce7 of pybricks._common.BLE.broadcast:7
msgid ""
"Choose ``None`` to stop broadcasting. This helps improve performance when"
" you don't need the broadcast feature, especially when observing at the "
"same time."
msgstr ""

#: d8cb0935be934b7bada09eaeb13af2a8 of pybricks._common.BLE.broadcast:11
msgid ""
"The total data size is quite limited (26 bytes). ``True`` and ``False`` "
"take 1 byte each. ``float`` takes 5 bytes. ``int`` takes 2 to 5 bytes "
"depending on how big the number is. ``str`` and ``bytes`` take the number"
" of bytes in the object plus one extra byte."
msgstr ""

#: 8b95869a34a548ea8fc63fccf4064d63 of pybricks._common.BLE.broadcast:16
msgid ""
"When multitasking, only one task can broadcast at a time. To broadcast "
"information from multiple tasks (or block stacks), you could use a "
"dedicated separate task that broadcast new values when one or more "
"variables change."
msgstr ""

#: 46560ab2a72b45a1be422dcb12f7e3a5 of pybricks._common.BLE.broadcast:21
msgid "The value or values to be broadcast."
msgstr ""

#: ../../main/hubs/movehub.rst:60 38ebf810ac54406b8a339a0671da8087
msgid ".. image:: /blockimg/pybricks_blockBleObserve_PrimeHub.svg"
msgstr ""

#: e720a64ae83c40f69f2ea9998da455ef of pybricks._common.BLE.observe:1
msgid "Retrieves the last observed data for a given channel."
msgstr ""

#: 4b46fe96d23b4333a85f1a9c610e823a of pybricks._common.BLE.observe:3
msgid ""
"Receiving data is more reliable when the hub is not connected to a "
"computer or other devices at the same time."
msgstr ""

#: 6f468fae4d194c49af531b6cdc576b69 of pybricks._common.BLE.observe:6
msgid "The channel to observe (0 to 255)."
msgstr ""

#: e2432f70a20a4391a418c745544e80f8 of pybricks._common.BLE.observe:9
msgid ""
"The received data in the same format as it was sent, or ``None`` if no "
"recent data is available."
msgstr ""

#: 087917fa3657455598a2e372d8134ad8 of pybricks._common.BLE.signal_strength:1
msgid "Gets the average signal strength in dBm for the given channel."
msgstr ""

#: d1a9b060e63d40adb2a8ad64951bc56c of pybricks._common.BLE.signal_strength:3
msgid ""
"This indicates how near the broadcasting device is. Nearby devices may "
"have a signal strength around -40 dBm, while far away devices might have "
"a signal strength around -70 dBm."
msgstr ""

#: 2159d77ac77b44e0a21172eb15d8b40d of pybricks._common.BLE.signal_strength:7
msgid "The channel number (0 to 255)."
msgstr ""

#: 33d4aa75939a4ea59cf7c76b1aaf6946 of pybricks._common.BLE.signal_strength:10
msgid "The signal strength or ``-128`` if there is no recent observed data."
msgstr ""

#: 86511c646a2d4f989a80161d17659822 of pybricks._common.BLE.version:1
msgid "Gets the firmware version from the Bluetooth chip."
msgstr ""

#: ../../main/hubs/movehub.rst:69 ca0cbd620b5446bcb0361f9e61dedfd1
msgid "Using the battery"
msgstr ""

#: ../../main/hubs/movehub.rst:70 21172e914aa44f53bc850f45cdfbffcc
msgid ""
".. image:: "
"/blockimg/pybricks_blockBatteryMeasure_MoveHub_battery.voltage.svg"
msgstr ""

#: 7f00b22e14c84637b6f214e5049f80b7 of pybricks._common.Battery.voltage:1
msgid "Gets the voltage of the battery."
msgstr ""

#: 2cca4e8a52944b28879f14d2dbe4bc45 of pybricks._common.Battery.voltage:3
msgid "Battery voltage."
msgstr ""

#: ../../main/hubs/movehub.rst:74 7763949a228e45af88982318e9659391
msgid ""
".. image:: "
"/blockimg/pybricks_blockBatteryMeasure_MoveHub_battery.current.svg"
msgstr ""

#: d51aa1f35b624b68b91e05dad95ca576 of pybricks._common.Battery.current:1
msgid "Gets the current supplied by the battery."
msgstr ""

#: 16a010ffd04940a1afcd06c4757157db of pybricks._common.Battery.current:3
msgid "Battery current."
msgstr ""

#: ../../main/hubs/movehub.rst:79 54d2a7efdd9f49aa981ba4b5249e52c1
msgid "Button and system control"
msgstr ""

#: ../../main/hubs/movehub.rst:80 4edc3f618a7b4af49436438b743a25a5
msgid ".. image:: /blockimg/pybricks_blockButtonIsPressed_PrimeHub.svg"
msgstr ""

#: c8ca40f6d58b4e45b4822a7f3d1d17e8 of pybricks._common.Keypad.pressed:1
msgid "Checks which buttons are currently pressed."
msgstr ""

#: 7e7f93c75da24b87a21fa8ec049e8857 of pybricks._common.Keypad.pressed:3
msgid "Set of pressed buttons."
msgstr ""

#: ../../main/hubs/movehub.rst:84 6958c37bb48f4cd6b5f56962d041cb5c
msgid ".. image:: /blockimg/pybricks_blockHubStopButton_MoveHub.svg"
msgstr ""

#: ../../main/hubs/movehub.rst:86 2f929c178b65485b9f16c55724ea3354
msgid ".. image:: /blockimg/pybricks_blockHubStopButton_MoveHub_none.svg"
msgstr ""

#: 5fbf6bb9b4804acdbdc33ba47793bfd8 of
#: pybricks._common.System.set_stop_button:1
msgid "Sets the button or button combination that stops a running script."
msgstr ""

#: e15d3146a06f4192b2345cd16d953a70 of
#: pybricks._common.System.set_stop_button:3
msgid ""
"Normally, the center button is used to stop a running script. You can "
"change or disable this behavior in order to use the button for other "
"purposes."
msgstr ""

#: 366fbb1802494c60a8421fc0855013c3 of
#: pybricks._common.System.set_stop_button:7
msgid ""
"A button such as :attr:`Button.CENTER "
"<pybricks.parameters.Button.CENTER>`, or a tuple of multiple buttons. "
"Choose ``None`` to disable the stop button altogether. If you do, you can"
" still turn the hub off by holding the center button for three seconds."
msgstr ""

#: eaad7efab2e14454b51eef8e723d260a of pybricks._common.System.name:1
msgid "Gets the hub name. This is the name you see when connecting via Bluetooth."
msgstr ""

#: 42526191568e4d61a2349eb2e8be2986 of pybricks._common.System.name:4
msgid "The hub name."
msgstr ""

#: a5274c7075cf4f1bb89d778c8ad35409 of pybricks._common.System.storage:1
msgid "Reads or writes binary data to persistent storage."
msgstr ""

#: f81d1a2917d34ea0a507c57b5f0f705d of pybricks._common.System.storage:3
msgid ""
"This lets you store data that can be used the next time you run the "
"program."
msgstr ""

#: 9a200e3efae2451c90196860d9a97f5c of pybricks._common.System.storage:6
msgid ""
"The data will be saved to flash memory when you turn the hub off "
"normally. It will not be saved if the batteries are removed *while* the "
"hub is still running."
msgstr ""

#: d70a80b3ef9343d6bd05ad217416402d of pybricks._common.System.storage:10
msgid ""
"Once saved, the data will remain available even after you remove the "
"batteries."
msgstr ""

#: 6765e74f297e40d98cdb8fae2e58acc0 of pybricks._common.System.storage:13
msgid "The offset from the start of the user storage memory, in bytes."
msgstr ""

#: 26f96e39ea5a4e83a62bfa2b4bebbb01 of pybricks._common.System.storage:15
msgid "The number of bytes to read. Omit this argument when writing."
msgstr ""

#: a54d1260fa024cbb85e95f059a7fe962 of pybricks._common.System.storage:17
msgid "The bytes to write. Omit this argument when reading."
msgstr ""

#: 5303d2e252b244339052dbd76f374734 of pybricks._common.System.storage:20
msgid "The bytes read if reading, otherwise ``None``."
msgstr ""

#: ../../main/hubs/movehub.rst e6c7ea86a0754184a775c31132c11b94
msgid "Raises"
msgstr ""

#: 8e26e9583de744e7a11006a4aa832c53 of pybricks._common.System.storage:22
msgid "If you try to read or write data outside of the allowed range."
msgstr ""

#: ../../main/hubs/movehub.rst:95 70f7c85412884d88b432733cde3fd677
msgid ""
"You can store up to 128 bytes of data on this hub. The data is cleared "
"when you update the Pybricks firmware or if you restore the original "
"firmware."
msgstr ""

#: ../../main/hubs/movehub.rst:99 48e30e061e3746378c6cddd1761d7d98
msgid ".. image:: /blockimg/pybricks_blockHubShutdown_MoveHub.svg"
msgstr ""

#: 6c5845d88f21451b991bc533d659572e of pybricks._common.System.shutdown:1
msgid "Stops your program and shuts the hub down."
msgstr ""

#: 228da4a7e64a4ce7b6e37d74ae3e6574 of pybricks._common.System.reset_reason:1
msgid ""
"Finds out how and why the hub (re)booted. This can be useful to diagnose "
"some problems."
msgstr ""

#: d42a7d748bdd4733b6ec7b758fa35b04 of pybricks._common.System.reset_reason:4
msgid ""
"* ``0`` if the hub was previously powered off   normally. * ``1`` if the "
"hub rebooted automatically, like   after a firmware update. * ``2`` if "
"the hub previously   crashed due to a watchdog timeout, which indicates a"
" firmware   issue."
msgstr ""

#: ca980ce597834ea1adb34343fb62cde4 of pybricks._common.System.reset_reason:6
msgid "``0`` if the hub was previously powered off normally."
msgstr ""

#: 8a08a114430a4f60bdb3f13a7edd5c08 of pybricks._common.System.reset_reason:8
msgid "``1`` if the hub rebooted automatically, like after a firmware update."
msgstr ""

#: 323dff436f1c497e95feac199d470abf of pybricks._common.System.reset_reason:10
msgid ""
"``2`` if the hub previously crashed due to a watchdog timeout, which "
"indicates a firmware issue."
msgstr ""

#: ../../main/hubs/movehub.rst:106 8499bf3203154c7db450a273fff42a00
msgid "Status light examples"
msgstr ""

#: ../../main/hubs/movehub.rst:109 9d4094fcb3184ccb8c1b52e33b482174
msgid "Turning the light on and off"
msgstr ""

#: ../../main/hubs/movehub.rst:111 0af8e2a60a65479da6cd16a6a314ca84
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Turn the light on and off 5 times.\n"
"for i in range(5):\n"
"\n"
"    hub.light.on(Color.RED)\n"
"    wait(1000)\n"
"\n"
"    hub.light.off()\n"
"    wait(500)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:115 04a1471f992347f29eb007892b5574c7
msgid "Making the light blink"
msgstr ""

#: ../../main/hubs/movehub.rst:117 965334d174e64bfbad91d0ef43057e8f
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub\n"
"hub = MoveHub()\n"
"\n"
"# Keep blinking red on and off.\n"
"hub.light.blink(Color.RED, [500, 500])\n"
"\n"
"wait(10000)\n"
"\n"
"# Keep blinking green slowly and then quickly.\n"
"hub.light.blink(Color.GREEN, [500, 500, 50, 900])\n"
"\n"
"wait(10000)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:121 1c9988136e3548e3bb45084ca6309924
msgid "IMU examples"
msgstr ""

#: ../../main/hubs/movehub.rst:124 179380abe89f4c9a9cd6983ffa275ac5
msgid "Testing which way is up"
msgstr ""

#: ../../main/hubs/movehub.rst:126 118d455c5b104276b1cbb0b680e20e13
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Side\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Define colors for each side in a dictionary.\n"
"SIDE_COLORS = {\n"
"    Side.TOP: Color.RED,\n"
"    Side.BOTTOM: Color.BLUE,\n"
"    Side.LEFT: Color.GREEN,\n"
"    Side.RIGHT: Color.YELLOW,\n"
"    Side.FRONT: Color.MAGENTA,\n"
"    Side.BACK: Color.BLACK,\n"
"}\n"
"\n"
"# Keep updating the color based on detected up side.\n"
"while True:\n"
"\n"
"    # Check which side of the hub is up.\n"
"    up_side = hub.imu.up()\n"
"\n"
"    # Change the color based on the side.\n"
"    hub.light.on(SIDE_COLORS[up_side])\n"
"\n"
"    # Also print the result.\n"
"    print(up_side)\n"
"    wait(50)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:130 d5d076762664412d847dd175cf2ee8f1
msgid "Reading acceleration"
msgstr ""

#: ../../main/hubs/movehub.rst:132 5fa245c2e87442e9822d097d0a4e1949
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Get the acceleration tuple.\n"
"print(hub.imu.acceleration())\n"
"\n"
"while True:\n"
"    # Get individual acceleration values.\n"
"    x, y, z = hub.imu.acceleration()\n"
"    print(x, y, z)\n"
"\n"
"    # Wait so we can see what we printed.\n"
"    wait(100)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:137 d7a2fc5f5ed94c309a024dda2020326b
msgid "Bluetooth examples"
msgstr ""

#: ../../main/hubs/movehub.rst:140 95cb2b0f0c0a41488d61095c48c80dd8
msgid "Broadcasting data to other hubs"
msgstr ""

#: ../../main/hubs/movehub.rst:142 66dfd3f9e698457ab9be9f386331b67d
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub(broadcast_channel=1)\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Read the motor angles to be sent to the other hub.\n"
"    left_angle = left_motor.angle()\n"
"    right_angle = right_motor.angle()\n"
"\n"
"    # Set the broadcast data and start broadcasting if not already doing "
"so.\n"
"    data = (left_angle, right_angle)\n"
"    hub.ble.broadcast(data)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is no "
"reason\n"
"    # to call the broadcast() method more often than that.\n"
"    wait(100)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:146 038fd68a9e1b464e99bd5c70d5072f95
msgid "Observing data from other hubs"
msgstr ""

#: ../../main/hubs/movehub.rst:148 c3c7d70c157542e389a2b441cf4078de
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.pupdevices import Motor\n"
"from pybricks.parameters import Color, Port\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub(observe_channels=[1])\n"
"\n"
"# Initialize the motors.\n"
"left_motor = Motor(Port.A)\n"
"right_motor = Motor(Port.B)\n"
"\n"
"while True:\n"
"    # Receive broadcast from the other hub.\n"
"\n"
"    data = hub.ble.observe(1)\n"
"\n"
"    if data is None:\n"
"        # No data has been received in the last 1 second.\n"
"        hub.light.on(Color.RED)\n"
"    else:\n"
"        # Data was received and is less that one second old.\n"
"        hub.light.on(Color.GREEN)\n"
"\n"
"        # *data* contains the same values in the same order\n"
"        # that were passed to hub.ble.broadcast() on the\n"
"        # other hub.\n"
"        left_angle, right_angle = data\n"
"\n"
"        # Make the motors on this hub mirror the position of the\n"
"        # motors on the other hub.\n"
"        left_motor.track_target(left_angle)\n"
"        right_motor.track_target(right_angle)\n"
"\n"
"    # Broadcasts are only sent every 100 milliseconds, so there is\n"
"    # no reason to call the observe() method more often than that.\n"
"    wait(100)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:153 50bd45547b384a539ef9662f958b10c7
msgid "Button and system examples"
msgstr ""

#: ../../main/hubs/movehub.rst:156 25f8f1827e674540b15b903f5e526fee
msgid "Using the stop button during your program"
msgstr ""

#: ../../main/hubs/movehub.rst:158 c8b4eab5895f4cedb32b045d2c3fc2cf
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.parameters import Color, Button\n"
"from pybricks.tools import wait, StopWatch\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Disable the stop button.\n"
"hub.system.set_stop_button(None)\n"
"\n"
"# Check the button for 5 seconds.\n"
"watch = StopWatch()\n"
"while watch.time() < 5000:\n"
"\n"
"    # Set light to green if pressed, else red.\n"
"    if hub.buttons.pressed():\n"
"        hub.light.on(Color.GREEN)\n"
"    else:\n"
"        hub.light.on(Color.RED)\n"
"\n"
"# Enable the stop button again.\n"
"hub.system.set_stop_button(Button.CENTER)\n"
"\n"
"# Now you can press the stop button as usual.\n"
"wait(5000)\n"
msgstr ""

#: ../../main/hubs/movehub.rst:162 08edabd28a284594a7242a86d2bef934
msgid "Turning the hub off"
msgstr ""

#: ../../main/hubs/movehub.rst:164 2db026e8851441368146c72008393c4d
msgid ""
"from pybricks.hubs import MoveHub\n"
"from pybricks.tools import wait\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Say goodbye and give some time to send it.\n"
"print(\"Goodbye!\")\n"
"wait(100)\n"
"\n"
"# Shut the hub down.\n"
"hub.system.shutdown()\n"
msgstr ""

#: ../../main/hubs/movehub.rst:168 6186e7affa6242d7ad4c8c7aa46a0fc9
msgid "Making random numbers"
msgstr ""

#: ../../main/hubs/movehub.rst:170 07c19a3da402454388f3b4f25d786639
msgid ""
"The Move Hub does not include the :mod:`urandom` module. If you need "
"random numbers in your application, you can try a variation of the "
"following example."
msgstr ""

#: ../../main/hubs/movehub.rst:173 bd08b3fc8fe449ab8c22e09ffcc37b9a
msgid ""
"To make it work better, change the initial value of ``_rand`` to "
"something that is truly random in your application. You could use the IMU"
" acceleration or a sensor value, for example."
msgstr ""

#: ../../main/hubs/movehub.rst:177 08a8423c18b947809d02fdb1cae58484
msgid ""
"from pybricks.hubs import MoveHub\n"
"\n"
"# Initialize the hub.\n"
"hub = MoveHub()\n"
"\n"
"# Initialize \"random\" seed.\n"
"_rand = hub.battery.voltage() + hub.battery.current()\n"
"\n"
"\n"
"# Return a random integer N such that a <= N <= b.\n"
"def randint(a, b):\n"
"    global _rand\n"
"    _rand = 75 * _rand % 65537  # Lehmer\n"
"    return _rand * (b - a + 1) // 65537 + a\n"
"\n"
"\n"
"# Generate a few example numbers.\n"
"for i in range(5):\n"
"    print(randint(0, 1000))\n"
msgstr ""

